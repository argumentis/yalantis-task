{"version":3,"sources":["redux/actions/usersActions.js","App.js","reportWebVitals.js","redux/reducers/users.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["GET_USERS_LIST","connect","store","usersList","users","getUsersList","dispatch","axios","get","then","res","type","payload","_","catch","error","alert","useEffect","className","map","item","firstName","lastName","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","selectedUsers","rootReducer","combineReducers","state","action","updatedArray","includes","selected","createStore","composeWithDevTools","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wPAAaA,EAAiB,iB,OCqB9B,IAYeC,eAZS,SAACC,GAEvB,MAAO,CACLC,UAFoBD,EAAME,MAApBD,aAW8B,CAAEE,aD5Bd,WAC1B,OAAO,SAACC,GACNC,IACGC,IAAI,kEACJC,MAAK,SAACC,GACLJ,EAAS,CAAEK,KAAM,iBAAkBC,QAASC,IAAEL,IAAIE,EAAK,OAAQ,SAEhEI,OAAM,SAACC,GAAD,OAAWC,MAAMD,SCqBfd,EA3Bf,YAA2C,IAA5BI,EAA2B,EAA3BA,aAAcF,EAAa,EAAbA,UAI3B,OAFAc,qBAAU,kBAAMZ,MAAgB,IAG9B,qBAAKa,UAAU,MAAf,SACGf,EAAUgB,KAAI,SAACC,GAAD,OACb,gCACGA,EAAKC,UADR,IACoBD,EAAKE,WADfF,EAAKG,YCDRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAgD,IAA9CkB,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,cCLRO,EAAe,CACnB7B,UAAW,GACX8B,cAAe,CAAC,2BAA4B,6BCDvC,IAAMC,EAAcC,0BAAgB,CAAE/B,MDOtC,WAA8C,IAA/BgC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAClD,GAAQA,EAAO1B,OACRX,EAAL,CAEE,IAAMsC,EAAeD,EAAOzB,QAAQO,KAAI,SAACC,GACvC,OAAIgB,EAAMH,cAAcM,SAASnB,EAAKG,IAAY,2BAAKH,GAAZ,IAAkBoB,UAAU,IAChE,2BAAKpB,GAAZ,IAAkBoB,UAAU,OAE9B,OAAO,2BAAKJ,GAAZ,IAAmBjC,UAAWmC,IAG9B,OAAOF,K,gBEhBAlC,EAAQuC,sBAAYP,EAAaQ,8BAAoBC,0BAAgBC,OCG5EC,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACP,cAAC,IAAD,CAAU/C,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF2C,GAGFrB,M","file":"static/js/main.bf9e6066.chunk.js","sourcesContent":["export const GET_USERS_LIST = 'GET_USERS_LIST'\n\nimport axios from 'axios'\nimport _ from 'lodash'\n\nexport const getUsersList = () => {\n  return (dispatch) => {\n    axios\n      .get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n      .then((res) => {\n        dispatch({ type: 'GET_USERS_LIST', payload: _.get(res, 'data', []) })\n      })\n      .catch((error) => alert(error))\n  }\n}\n","import './App.css'\nimport PropTypes from 'prop-types'\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { getUsersList } from './redux/actions/usersActions'\n\nfunction App({ getUsersList, usersList }) {\n  // get users list from api on mount\n  useEffect(() => getUsersList(), [])\n\n  return (\n    <div className=\"App\">\n      {usersList.map((item) => (\n        <div key={item.id}>\n          {item.firstName} {item.lastName}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst mapStateToProps = (store) => {\n  const { usersList } = store.users\n  return {\n    usersList,\n  }\n}\n\nApp.propTypes = {\n  getUsersList: PropTypes.func.isRequired,\n  usersList: PropTypes.array.isRequired,\n}\n\nexport default connect(mapStateToProps, { getUsersList })(App)\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { GET_USERS_LIST } from '../actions/usersActions'\n\nconst initialState = {\n  usersList: [],\n  selectedUsers: ['5e00928d91e7feaa9872ec08', '5e00928df892b0c84c82db9d'],\n}\n\n// JSON.parse(localStorage.getItem('selectedUsers')) || []\n// localStorage.setItem('selectedUsers', JSON.stringify([...state.selectedUsers, action.payload]))\n\nexport function users(state = initialState, action) {\n  switch (action.type) {\n    case GET_USERS_LIST:\n      // checking users on selected\n      const updatedArray = action.payload.map((item) => {\n        if (state.selectedUsers.includes(item.id)) return { ...item, selected: true }\n        return { ...item, selected: false }\n      })\n      return { ...state, usersList: updatedArray }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { users } from './users'\n\nexport const rootReducer = combineReducers({ users })\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\nreportWebVitals()\n"],"sourceRoot":""}