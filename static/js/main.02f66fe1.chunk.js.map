{"version":3,"sources":["redux/actions/usersActions.js","redux/reducers/users.js","redux/reducers/index.js","redux/store.js","components/EmployeesList/RadioButton.js","components/EmployeesList/ListItem.js","components/EmployeesList/ListByLetter.js","components/EmployeesList/index.js","components/EmployeesBirthday/BirthdayList.js","components/EmployeesBirthday/index.js","App.js","index.js"],"names":["UPDATE_USERS_LIST","UPDATE_SELECTED_LIST","updateSelectedList","list","updatedList","filter","item","selected","map","id","dispatch","type","payload","initialState","usersList","selectedUsers","JSON","parse","localStorage","getItem","rootReducer","combineReducers","users","state","action","setItem","stringify","store","createStore","composeWithDevTools","applyMiddleware","thunk","RadioInput","title","value","className","name","defaultChecked","connect","updateUser","userId","status","getState","updatedArray","_","get","employee","buttons","checked","classNames","firstName","lastName","onChange","e","target","index","RadioButton","ListByLetter","letter","employeesList","isEmpty","alphabet","split","loading","color","height","width","BirthdayList","field","monthName","employeesInMonth","sort","a","b","dob","months","selectedList","includes","birthdayMonth","moment","format","employees","getUsersList","axios","then","res","usersData","upgradedArray","useState","setLoading","useEffect","catch","error","alert","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.02f66fe1.chunk.js","sourcesContent":["// base\nimport axios from 'axios'\nimport _ from 'lodash'\n\n//actions\nexport const UPDATE_USERS_LIST = 'UPDATE_USERS_LIST'\nexport const UPDATE_SELECTED_LIST = 'UPDATE_SELECTED_LIST'\n\nexport const getUsersList = () => {\n  return (dispatch, getState) => {\n    return axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n      .then((res) => {\n        const usersData = _.get(res, 'data', [])\n        const selectedUsers = _.get(getState(), 'users.selectedUsers', [])\n\n        // checking users on selected\n        const upgradedArray = usersData.map((item) => {\n          if (selectedUsers.includes(item.id)) return { ...item, selected: true }\n          return { ...item, selected: false }\n        })\n\n        dispatch({ type: 'UPDATE_USERS_LIST', payload: upgradedArray })\n        return res\n      })\n  }\n}\n\nexport const updateUser = (userId, status) => {\n  return (dispatch, getState) => {\n    const usersData = _.get(getState(), 'users.usersList', [])\n    const updatedArray = usersData.map((item) => {\n      if (item.id === userId) return { ...item, selected: status }\n      return item\n    })\n    dispatch({ type: 'UPDATE_USERS_LIST', payload: updatedArray })\n    dispatch(updateSelectedList(updatedArray))\n  }\n}\n\nexport const updateSelectedList = (list) => {\n  const updatedList = list.filter((item) => item.selected).map((item) => item.id)\n  return (dispatch) => {\n    dispatch({ type: 'UPDATE_SELECTED_LIST', payload: updatedList })\n  }\n}\n","import { UPDATE_USERS_LIST, UPDATE_SELECTED_LIST } from '../actions/usersActions'\n\nconst initialState = {\n  usersList: [],\n  selectedUsers: JSON.parse(localStorage.getItem('selectedUsers')) || [],\n}\n\nexport function users(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_USERS_LIST:\n      return { ...state, usersList: action.payload }\n\n    case UPDATE_SELECTED_LIST:\n      localStorage.setItem('selectedUsers', JSON.stringify(action.payload))\n      return { ...state, selectedUsers: action.payload }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { users } from './users'\n\nexport const rootReducer = combineReducers({ users })\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// styles\nimport './employeesList.css'\n\nconst RadioInput = ({ id, selected, title, value }) => {\n  return (\n    <div className=\"radioButton\">\n      <input\n        type=\"radio\"\n        name={id}\n        value={value}\n        defaultChecked={selected}/>\n      <div>{title}</div>\n    </div>\n  )\n}\n\nRadioInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n}\n\nexport default RadioInput\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\n// redux\nimport { connect } from 'react-redux'\nimport { updateUser } from '../../redux/actions/usersActions'\n\n// components\nimport RadioButton from './RadioButton'\n\n// styles\nimport './employeesList.css'\n\nconst ListItem = ({ employee, updateUser }) => {\n\n  const handleChangeActive = (id) => (e) => {\n    const { value } = e.target\n    updateUser(id, value === 'true')\n  }\n\n  const buttons = [\n    {\n      id: employee.id,\n      title: 'active',\n      value: 'true',\n      checked: employee.selected,\n    },\n    {\n      id: employee.id,\n      title: 'not active',\n      value: 'false',\n      checked: !employee.selected,\n    },\n  ]\n\n  return (\n    <div className=\"listItem\">\n      <h4 className={classNames('employeeName', employee.selected && 'checkedName')}>\n        {`${employee.firstName} ${employee.lastName}`}\n      </h4>\n      <div\n        className=\"buttonsContainer\"\n        onChange={handleChangeActive(employee.id)}\n      >\n        {buttons.map((item, index) => (\n          <RadioButton\n            key={index}\n            id={item.id}\n            title={item.title}\n            value={item.value}\n            selected={item.checked}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nListItem.propTypes = {\n  updateUser: PropTypes.func.isRequired,\n  employee: PropTypes.object.isRequired,\n}\n\nexport default connect(null, { updateUser })(ListItem)\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\n// components\nimport ListItem from './ListItem'\n\n// styles\nimport './employeesList.css'\n\nconst ListByLetter = ({ letter, employeesList }) => {\n  return (\n    <div className=\"lettersListItem\">\n      <h3 className=\"letter\">{letter}</h3>\n      <div className=\"usersList\">\n        {_.isEmpty(employeesList) ?\n          <p className=\"noData\">\n            No employees\n          </p> :\n          employeesList.map((item) => <ListItem key={item.id} employee={item}/>)\n        }\n      </div>\n    </div>\n  )\n}\n\nListByLetter.propTypes = {\n  letter: PropTypes.string.isRequired,\n  employeesList: PropTypes.array.isRequired,\n}\n\nexport default ListByLetter\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Loader from 'react-loader-spinner'\n\n// redux\nimport { connect } from 'react-redux'\n\n// components\nimport ListByLetter from './ListByLetter'\n\n// styles\nimport './employeesList.css'\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n\nconst EmployeesList = ({ usersList, loading }) => {\n  return (\n    <div className=\"employeesListRoot\">\n      <h2>Employees</h2>\n      {loading ?\n        <div className=\"spinnerContainer\">\n          <Loader\n            type=\"TailSpin\"\n            color=\"#00BFFF\"\n            height={80}\n            width={80}\n          />\n        </div> :\n        <div className=\"lettersList\">\n          {alphabet.map((letter, index) => {\n            // search users by the first letter of the name, depending on the current letter\n            const employeesList = usersList.filter((item) => item.firstName[0] === letter)\n            return (\n              <ListByLetter\n                key={index}\n                letter={letter}\n                employeesList={employeesList}\n              />\n            )\n          })}\n        </div>\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = (store) => {\n  const { usersList } = store.users\n  return {\n    usersList,\n  }\n}\n\nEmployeesList.propTypes = {\n  loading: PropTypes.bool,\n  usersList: PropTypes.array.isRequired,\n}\n\nexport default connect(mapStateToProps, {})(EmployeesList)\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\n// styles\nimport './employeesBirthday.css'\n\nconst BirthdayList = ({ monthName, employeesInMonth }) => {\n\n  const byField = (field) => {\n    return (a, b) => a[field] > b[field] ? 1 : -1\n  }\n\n  return (\n    <div className=\"flexContainer\">\n      <h4>{monthName}</h4>\n      {_.isEmpty(employeesInMonth) ?\n        <p>No Employees</p> :\n        <div className=\"flexContainer\">\n          {employeesInMonth.sort(byField('lastName')).map((item) => (\n            <p key={item.id}>\n              {`${item.lastName} ${item.firstName} - ${item.dob}`}\n            </p>\n          ))}\n        </div>\n      }\n    </div>\n  )\n}\n\nBirthdayList.propTypes = {\n  monthName: PropTypes.string.isRequired,\n  employeesInMonth: PropTypes.array.isRequired,\n}\n\nexport default BirthdayList\n","// base\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport _ from 'lodash'\n\n// redux\nimport { connect } from 'react-redux'\n\n// components\nimport BirthdayList from './BirthdayList'\n\n// styles\nimport './employeesBirthday.css'\n\nconst months = [\n  'November',\n  'December',\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n]\n\nconst EmployeesBirthday = ({ selectedUsers, usersList = [], loading }) => {\n  // find employees info by id and add parsed fields about birthday\n  const selectedList = usersList\n    .filter((item) => selectedUsers.includes(item.id))\n    .map((item) => (\n      {\n        ...item,\n        birthdayMonth: moment(item.dob).format('MMMM'),\n        dob: moment(item.dob).format('LL')\n      }\n    ))\n\n  return (\n    <div className=\"birthdayRoot\">\n      <h2>Employees birthday</h2>\n      <div className=\"flexContainer\">\n        {_.isEmpty(selectedUsers) || loading ?\n          <h4>Employees List is empty</h4> :\n          <div>\n            {months.map((item) => {\n              // filtered users by month name\n              const employeesInMonth = selectedList.filter((employees) => employees.birthdayMonth === item)\n              return (\n                <BirthdayList\n                  key={item}\n                  monthName={item}\n                  employeesInMonth={employeesInMonth}\n                />\n              )\n            })}\n          </div>\n        }\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (store) => {\n  const { usersList, selectedUsers } = store.users\n  return {\n    usersList,\n    selectedUsers,\n  }\n}\n\nEmployeesBirthday.propTypes = {\n  loading: PropTypes.bool,\n  usersList: PropTypes.array.isRequired,\n  selectedUsers: PropTypes.array.isRequired,\n}\n\nexport default connect(mapStateToProps, {})(EmployeesBirthday)\n","// base\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport classNames from 'classnames'\n\n// redux\nimport { connect } from 'react-redux'\nimport { getUsersList } from './redux/actions/usersActions'\n\n// styles\nimport './App.css'\n\n// components\nimport EmployeesList from './components/EmployeesList'\nimport EmployeesBirthday from './components/EmployeesBirthday'\n\nconst App = ({ getUsersList }) => {\n  const [loading, setLoading] = useState(true)\n  // get users list from api on mount\n  useEffect(() =>\n    getUsersList()\n      .then(() => setLoading(false))\n      .catch((error) => alert(error)), []\n  )\n\n  return (\n    <div className={classNames('app', loading && 'appEmptyState')}>\n      <div className=\"employeesList\">\n        <EmployeesList loading={loading} />\n      </div>\n      <div className=\"employeesBirthday\">\n        <EmployeesBirthday loading={loading} />\n      </div>\n    </div>\n  )\n}\n\nApp.propTypes = {\n  getUsersList: PropTypes.func.isRequired,\n}\n\nexport default connect(null, { getUsersList })(App)\n","// base\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n// redux\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\n// components\nimport App from './App'\n\n// styles\nimport './index.css'\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}